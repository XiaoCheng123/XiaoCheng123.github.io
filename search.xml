<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue学习日记（四）——Vue状态管理vuex]]></title>
    <url>%2F2018%2F02%2F02%2FVue%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94Vue%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%2F</url>
    <content type="text"><![CDATA[前言先说句前话，如果不是接触大型项目，不需要有多个子页面，不使用vuex也是完全可以的。 说实在话，我在阅读vuex文档的时候，也很难以去理解vuex，甚至觉得没有使用它我也可以。但是直到我在项目碰到下面这些问题： 当路由切换的时候，原本路由的数据太多，传递过去太麻烦。 有些数据是多个路由需要用到的，那我就需要从后台获取多次数据 当然，这些问题都可以解决，就是在实例化vue对象的时候，就将这些数据绑定在window对象上面。但是我们也不得不设想： 万一数据太多了，那么可阅读性是不是会下降 如果只是修改单独的数据，是不是所有的页面都可以更新 对于第一个问题，答案是肯定的，虽然说，我们现在也可以用模块化的思想去使可阅读性更加好，但是没有一个规范，对于刚入手项目的总是难以理解。 对于第二个问题，当你页面少的时候，是不会出现这样的问题的，但是如果页面多了，你就会发现，当你把window.$data里面的数据更新的时候，所有页面的计算属性都会失效，就是你无论怎么修改数据，页面都不会更新数据。 这时候，就需要用到我们的vuex了。 vuex介绍 那么vuex 到底是什么？ 引用官网的说法就是Vuex是一个专为Vue.js应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 是不是还是有点难以理解，其实简单的说vuex就是把这个项目的所有数据都存储在一个地方，方便修改和获取数据。 例如，我们从下面这张图给大家先简单的分析一下 在这张图片里面我们很明显可以看到三个部分 Vue Components 表示vue里面的组件 Backend API 后台API vuex 组件里面的数据管理 我们可以生动形象的理解，如果说Vuex是一个仓库，那么么Vue Components就就是售货者，负责把仓库里面的东西展现出来，Backend API就相当于入货的人，负责将货物买进来（也就是后台返回数据给前端，保存在vuex里面）。而vuex就是仓库，这个仓库里面有货物state，有管理货物进出的Muations 引用vuex在说state之前，我们可以先在我们vue项目引用vuex1npm install vuex 然后在我们的src目录下新建一个store的文件夹，在store文件夹里面新建一个index.js的文件1234567891011// ~/src/store/index.jsimport Vue from &apos;Vue&apos;import Vuex from &apos;Vuex&apos;// 在这里声明实例一个Vue 去引用Vuex状态管理插件// 这样就可以减少在main.js里面的代码量了Vue.use(Vuex)// 返回store实例对象export default new Vuex.Store(&#123;&#125;) 这里说一下吧，这里Store其实就是相当vuex实例化的一个仓库。 data替代者state 为什么说state是data的替代者呢？ 很容易理解，就是讲组件里面的局部参数，改成了一个可以全局使用的参数state，例如，我们在me.vue组件引用的数据todo。 那么我们可以在store里面这样实例化它出来12345678// ~/src/store/index.js// ...export default new Vuex.Store(&#123; state: &#123; todo: [] &#125;&#125;) 那么，我们在组件里面怎么使用这个数据呢？1234567891011// me.vue组件文件// ...&lt;script type=&quot;text/ecmascript-6&quot;&gt;export default &#123; data() &#123; meTodo: [] // 然后在方法里面引用this.meTodo = this.$store.state.todo &#125;&#125;&lt;/script&gt;// ... 是不是很简单，但是我们不可能每次使用这个值都要获取一次吧，这些vue团队也都想好了，我们可以通过计算属性来获取state里面的数据。12345678910111213// ...&lt;script type=&quot;text/ecmascript-6&quot;&gt;// 在单独构建的版本中辅助函数为 Vuex.mapStateimport &#123; mapState &#125; from &apos;vuex&apos;export default &#123; computed: mapState([ // 映射 this.todo 为 store.state.todo &apos;todo&apos;])&#125;&lt;/script&gt;// ... 相当于1234567891011// ...&lt;script type=&quot;text/ecmascript-6&quot;&gt;export default &#123; computed: todo () &#123; return this.$store.state.todo &#125;])&#125;&lt;/script&gt;// ... 计算属性Getter有时候我们会需要对state的数据进行一些过滤操作，例如我们只要在todo里面大于10的数字，如果是用computed的话，我们就需要使用filter函数，为了更加简便，vuex也给我们提供了计算属性getter。 我们可以修改我们的~/src/store/index文件123456789// ...export default new Vuex.Store(&#123; state: &#123; todo: [] &#125;, getters: &#123; todo: state =&gt; state.todo.filter(number =&gt; number &gt; 10) &#125;&#125;) 然后在me.vue里面引用123456789101112131415// ...&lt;script type=&quot;text/ecmascript-6&quot;&gt;// 在单独构建的版本中辅助函数为 Vuex.mapGettersimport &#123; mapGetters &#125; from &apos;vuex&apos;export default &#123; computed: &#123; ...mapGetters([ // 映射 this.todo 为 store.state.todo &apos;todo&apos; ]) &#125;&#125;&lt;/script&gt;// ... 这样就可以简单拿到大于10的todo数据了 修改state的Mutation 我们说了怎么获取数据，但是我们应该怎么修改数据呢，是不是直接赋值给数据就可以了呢？ 答案当然不是，vuex规定了，我们只能用Mutation来进行修改数据，那么，我们怎么进行修改数据呢？修改我们的~/src/store/index.js123456789101112// ...export default new Vuex.Store(&#123; state: &#123; todo: [] &#125;, getters: &#123; todo: state =&gt; state.todo.filter(number =&gt; number &gt; 10) &#125;, mutations: &#123; revsiseTode: (state, oneTodo) =&gt; (state.todo = oneTodo) // 修改state的值 &#125;&#125;) 然后在我们的me.vue组件里面修改123456789101112131415161718192021222324// ...// 在单独构建的版本中辅助函数为 Vuex.mapGettersimport &#123; mapGetters &#125; from &apos;vuex&apos;// 在单独构建的版本中辅助函数为 Vuex.mapMutationsimport &#123; mapMutations &#125; from &apos;vuex&apos;export default &#123; computed: &#123; ...mapGetters([ // 映射 this.todo 为 store.state.todo &apos;todo&apos; ]) &#125;, method: &#123; ...mapMutations( [ // 将 `this.revsiseTode()` 映射为 `this.$store.commit(&apos;revsiseTode&apos;)` // 如果想传递参数可以使用this.$store.commit(&apos;revsiseTode&apos;, oneTode) // 或者Action &apos;revsiseTode&apos; ] ) &#125;&#125; Action的使用写了这么久，终于到了Action的出场了，其实不管怎么说，Action主要是为了与后台交互而使用的属性，这里，我就假设todo的数据在路由/me/gettodo里面能够获取，因此，修改~/store/index.js1234567891011121314151617// ...export default new Vuex.Store(&#123; state: &#123; todo: [] &#125;, getters: &#123; todo: state =&gt; state.todo.filter(number =&gt; number &gt; 10) &#125;, mutations: &#123; revsiseTode: (state, oneTodo) =&gt; (state.todo = oneTodo) // 修改state的值 &#125;, actions: &#123; getTodo: context =&gt; Vue.http.get(&apos;/me/gettodo&apos;, (res) =&gt; &#123; context.commit(&apos;revsiseTode&apos;, res.body.todo) &#125;) &#125;&#125;) 然后就可以通过触发我们的actions来提交mutations去修改state的数据了，在me.vue修改12345678910111213141516171819202122// ...// 在单独构建的版本中辅助函数为 Vuex.mapGettersimport &#123; mapGetters &#125; from &apos;vuex&apos;// 在单独构建的版本中辅助函数为 Vuex.mapMutationsimport &#123; mapActions &#125; from &apos;vuex&apos;export default &#123; computed: &#123; ...mapGetters([ // 映射 this.todo 为 store.state.todo &apos;todo&apos; ]) &#125;, method: &#123; ...mapActions( [ &apos;reviseTodo&apos;, // 将 `this.reviseTodo()` 映射为 `this.$store.dispatch(&apos;reviseTodo&apos;) ] ) &#125;&#125;// ... vuex目录结构上面主要只是简单的讲了一下vuex的使用，也只是讲了一部分，不过相信看了这里之后再去官网就会有更深的理解。当然这些都是简单的使用，如果想把vuex运用到项目，必须把他们模块化更加好看，vuex官网也为我们提供了规范的项目目录结构，我这里就不多啰嗦几句了。 总结vuex其实不难，我一开始也以为很难一直学不会，只要多使用就会觉得，其实也就只是别人都封装好了的方法，我们去使用这个简便的仓库就行了。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue学习日记（二）——Vue核心思想]]></title>
    <url>%2F2018%2F02%2F01%2FVue%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94Vue%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%2F</url>
    <content type="text"><![CDATA[前言Vue.js是一个提供MVVM数据双向绑定的库，其核心思想无非就是： 数据驱动 组件系统 数据驱动Vue.js 的核心是一个响应的数据绑定系统，它让数据与DOM保持同步非常简单。在使用 jQuery 手工操作 DOM时，我们的代码常常是命令式的、重复的与易错的。Vue.js 拥抱数据驱动的视图概念。通俗地讲，它意味着我们在普通HTML模板中使用特殊的语法将 DOM “绑定”到底层数据。一旦创建了绑定，DOM将与数据保持同步。每当修改了数据，DOM 便相应地更新。这样我们应用中的逻辑就几乎都是直接修改数据了，不必与 DOM 更新搅在一起。这让我们的代码更容易撰写、理解与维护。 本人在阅读vue.js源码的时候，也发现了vue的数据驱动无非就是利用的是ES5Object.defineProperty和存储器属性，个人觉得也是vue比较轻便和灵活的原因之一。 getter和setter（所以只兼容IE9及以上版本），可称为基于依赖收集的观测机制。核心是VM，即ViewModel，保证数据和视图的一致性。 附：vue.js源码图在github上vue打包好的dist文件下面的vue.js可以找到（该图与核心技术无关，只是说明vue使用这个属性） 这个存储器属性也就是vue的核心，也是比jq好的地方之一，jq是通过绑定事件来进行操作dom，而vue和react是通过操作obj的属性来重新渲染dom 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 对入输入框input输入的内容都在output里面输出 --&gt; &lt;input type="text" id="input"&gt; &lt;br&gt; &lt;span id="output"&gt;&lt;/span&gt;&lt;/body&gt;&lt;script&gt; // 绑定事件的做法 // 但是没有办法从控制台控制信息修改value document.getElementById("input").addEventListener("keyup", function(e) &#123; document.getElementById("output").innerHTML = e.target.value &#125;) // 绑定虚拟dom的做法，就是通过改变一个obj的属性值 // 进而改变dom的值 var obj = &#123;&#125; // @obj 可以是任何一个对象 // @"string" 动态绑定的属性值 // @&#123;&#125; 构造getter和setter Object.defineProperty(obj, "string", &#123; get: function() &#123; console.log("getter") &#125;, set: function(val) &#123; document.getElementById("output").innerHTML = val document.getElementById("input").value = val &#125; &#125;)&lt;/script&gt;&lt;/html&gt; 组件系统组件系统，就是由于vue有比较优秀的组件系统，所以，现在很多项目也都采用了vue框架，如果你想要深入的了解组件系统，建议可以看看vue的官方文档 用官方一点的话来形容，组件化就是：实现了扩展HTML元素，封装可用的代码。页面上每个独立的可视/可交互区域视为一个组件；每个组件对应一个工程目录，组件所需要的各种资源在这个目录下就近维护；页面不过是组件的容器，组件可以嵌套自由组合形成完整的页面。 简单的说，其实就是把页面进行分块处理，分成多个小块，每个小块就是一个组件，这样可以形成组件的复用，而且提高开发效率。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue学习日记（三）——Vue路由管理vue-router]]></title>
    <url>%2F2018%2F02%2F01%2FVue%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Vue%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86vue-router%2F</url>
    <content type="text"><![CDATA[前言为了给读者更好的体验，去理解vue-router和下一篇介绍vuex，决定还是来一个实战教程来带大家更加的去深入理解vue-router，在这之前，读者先自行了解和去官网下载npm和node，附：npm官网 项目构建这里我采用vue-cli+webpack构建初始项目，在vue官网里面也有相关介绍，在这里我就手把手教大家一下吧，先通过控制台进入相关的文件目录下，然后输入 123456789101112# 后面是注释# $表示当前文件目录# 全局安装 vue-cli$ npm install --global vue-cli# 创建一个基于 webpack 模板的新项目$ vue init webpack my-project# 安装依赖，走你$ cd my-project$ npm install# 运行项目my-preoject$ npm run dev npm install –global vue-cli 下载构建工具 vue init webpack my-project 初始化项目 npm install 下载相关资源到node_models npm run dev 运行项目后，在浏览器输入http://localhost:8080/#/可看到 介绍vue-router经过上面简单的构建之后，一个项目的初始化就完成了，这里vue-cli和webpack已经帮我们弄好了文件目录结构和基本目录 在进行使用vue-router之前，我不得不也先介绍一下vue-router是什么？ 它是一个vue.js下的路由组件，那什么是路由呢？网上有一大堆官方的介绍，相信对于小白是难以理解的，这里我就简单的说明一下吧。 其实路由也就是url，url是什么呢？url就是唯一资源定位符，简单的说，也就是标记页面的唯一存在的一个标签，就像https://www.baidu.com，这里的www.baidu.com就是唯一资源定位符，https就只是一种协议，规范计算机网络的通信协议。 介绍完这些，那么对于我们究竟该怎么用呢？ 其实很简单，在平时当中，我们就经常碰到在一个网站里面点击链接会弹到另外一个页面，然后就可以发现他们的url改变了，而vue-router就是这样，在同个域名下（这里的域名是http://localhost:8080），改变域名后面的字符参数，比如http://localhost:8080/me和http://localhost:8080/you是两个不同的页面就是靠vue-router进行实现的。 引用vue-router如果你在之前没有安装vue-router的话，建议可以先去官网，看着文档使用npm安装一下，这里就不多做介绍了。 首先我先在项目my-project/src/components（存放组件的目录）里面添加两个文件me.vue和you.vue123456789101112131415161718192021222324252627// me.vue&lt;template&gt; &lt;div&gt; 我是me &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/ecmascript-6&quot;&gt;export default &#123;&#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;// you.vue&lt;template&gt; &lt;div&gt; 我是you &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/ecmascript-6&quot;&gt;export default &#123;&#125;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; 然后修改my-project/src/router（存放路由相关信息的目录）下面修改index.js成 12345678910111213141516171819202122232425262728293031import Vue from &apos;vue&apos;import Router from &apos;vue-router&apos;import HelloWorld from &apos;@/components/HelloWorld&apos;// 导入组件import me from &apos;../components/me&apos;import you from &apos;../components/you&apos;Vue.use(Router)export default new Router(&#123; routes: [ &#123; path: &apos;/&apos;, name: &apos;HelloWorld&apos;, component: HelloWorld &#125;, // 将组件命名到路由上，输入http://localhost:8080/#/me // 即可进入不同的页面 &#123; path: &apos;/me&apos;, component: me &#125;, // 将组件命名到路由上，输入http://localhost:8080/#/you // 即可进入不同的页面 &#123; path: &apos;/you&apos;, component: you &#125; ]&#125;) 这样只会输入http://localhost:8080/#/me就会进到其他页面，是不是很简单，那么我们怎么在页面里面进行跳转呢？ 这就运用到了更有趣的知识了就是router-link你只要在你的组件的代码下输入 1&lt;router-link :to=&quot;/me&quot;&gt;这里是跳转链接&lt;/router-link&gt; 网页就自动跳转到http://localhost:8080/#/me页面了，但是这样总是不好的，因为，如果由于一些原因，我们想修改路由的名字（比如me改成him）就得改两个文件的信息，因此，vue团队也早就想好了，就是name属性，将my-project/src/router（存放路由相关信息的目录）下面修改index.js成 1234567// ...&#123; path: &apos;/me&apos;, name: &apos;me&apos;, component: me&#125;,// ... 然后跳转就改成 1&lt;router-link :to=&quot;&#123; name: &apos;me&apos;&#125;&quot;&gt;这里是跳转链接&lt;/router-link&gt; 就可以进行跳转了 高级应用 前端路由 最初级的应用，就和上面的引用一样，当然还可以通过js代码来改变，这个也很简单，就是比如添加一个按钮，点击按钮通过js跳转到其他页面，就是重定向，简单的js代码也下面这样，就可以跳转到其他页面了 1vue.$router.push(&apos;/me&apos;) 动态路由 通过router-link传递参数，例如User，传入userId这个参数，进行渲染不同的路由信息 嵌套路由 嵌套路由其实简单的理解就是，子路由，例如，我想在me下面在添加几个路由him和she那上面的代码可以这样写之后输入http://localhost:8080/#/me/him就可以进入到子路由的页面 1234567891011121314151617// ... &#123; path: &apos;/me&apos;, name: &apos;me&apos;, component: me， children: [ &#123; path: &apos;him&apos; // ... &#125;, &#123; path: &apos;she&apos; // ... &#125; ] &#125;, // ... 懒加载 结合异步组件以及在组件的created钩子上触发获取数据的ajax请求，可以最大化的降低加载时间，减少流量消耗。这个对于没有项目的人可能接触比较少，建议先知道这个概念。 重定向 可以实现某些需要根据特定逻辑改变页面原本路由的需求，例如简单的未登录状态下的页面访问“个人信息”路由时应该重定向到登录路由页面。 History的控制 History是Html5的新语法，个人觉得就是对于跳转的时候，特别是微信小程序，就是控制点击回退按钮的时候不至于退出页面而跳转到自己想要的页面 总结其实还有很多高级应用场景，我就不一一列举出来了，因为这些其实最好还是上官方文档进行说明，我这里只是解释一下简单的用法，以及初学者可能对官方文档会有误解来进行说明一下，希望大家还是学会看API，附官网地址]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue学习日记（一）——Vue介绍]]></title>
    <url>%2F2018%2F01%2F31%2FVue%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94Vue%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[前言本人学习了一段时间的vue，并尝试写了一些小Demo之后，将vue投入了几个项目之后，一直在边学习边使用，经过看了vue,vuex,vue-router的官方文档和慕课网上的一些实战视频之后，深有体会，故此写下这些文章。 前端框架比较其实的话，前端有很多的框架，很多初学前端的人可能没有接触到框架，以为框架是很高大上的东西，就我个人而言，我是听从师姐的学习路线开始学习前端的，一开始的时候接触的就是html,css,js这些基本语言，对于框架，一直是觉得很高大上的东西。后来，经过长时间的与框架打交道之后，也明白了，基础对于前端开发者是很重要的，框架也就只是将你会复用的代码进行包装起来方便你的使用，最重要的还是基础。 目前前端开发有很多的框架在市面上，其实说是框架，如果从C语言java语言那些语言来说，也就是库，一些封装好的东西，告诉你用法，就可以简单的实现一个简单的项目了。如果想更加了解前端框架，建议可以百度百度，或者看这篇知乎讨论，点击里面的文章看看，引用一下这里的一张图片展示一下目前的前端框架。 是的这只是部分前端框架，就我个人觉得，目前前端框架的三大巨头也就只是vue,react,angular（顺序与排名无关）。 各个框架都有自己擅长的一方面： vue擅长单页面多路由的开发 react适合多页面，手机app还有一些大型的开发 angular系统比较完善，适合快速搭建产品的原型 但是也各有各的劣势： vue并不特别适合多页面的开发 react在单页面开发性能并不比vue好，因为vue比较轻便 angular不适合程序员去自我发挥很多，因为其基本配置好饿了很多东西 当然，以上也都只是个人的见解而已，有错误还望包涵指正，关于他们的社区，就不多做介绍了，三大框架社区都比较完善。 Vue的优势Vue.js是一个轻巧、高性能、可组件化的MVVM库，如果你不懂什么是mvvm模式可以看一下这篇文章个人觉得比较容易理解，同时拥有非常容易上手的API； Vue.js是一个构建数据驱动的Web界面的库。 Vue.js是一套构建用户界面的 渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。 Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。 另一方面，Vue 完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。 简单的说，Vue.js是一个构建数据驱动的 web 界面的渐进式框架。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。核心是一个响应的数据绑定系统 Vue.js的特性如下： 轻量级的框架 双向数据绑定 指令 插件化 Vue渐进式框架 为什么说vue是渐进式框架呢？ 其实vue的官方首页就说了，vue,渐进式JavaScript 框架 其实严格的说，vue并不是一个框架，他只是一个库，和jq一样，可以操作dom的库，不同的是vue操作的是虚拟dom，至于什么是虚拟dom我会在下篇文章继续介绍。 vue并不是框架，只是和他旁边的生态环境组成了一个框架，下面，贴一个官方的渐进式框架介绍图吧，方便理解。 正如上图解释，一个vue渐进式框架就是由 声明式渲染vue.js 组件系统element-ui（也可以用bootstrap等，但是建议还是用这个，因为其他的还要下载其他的dom库） 客户端路由vue-router 大型状态管理vuex 构建工具webpack Vue全家桶Vue著名的全家桶其实就是，包含了vue-router，vuex， vue-resource（现在基本不用，而是用更为简单的axios）。再加上构建工具vue-cli，就是一个完整的vue项目的核心构成。 同时，在vue调试方面，可以选择安装chrome插件vue Devtools，以及有专门的组件库elment-ui，轻轻松松就可以完成一个较大型的项目 总结vue个人觉得是很不错的框架，特别还是国内牛人发布的，接下来还会有vue一系列的文章，以及vue+axios+mysql+node+express全栈实现一个系统的文章，去更加深入的了解vue。当然还有更加深入的理解，大家也可以看看官方文档，都介绍的很充分了。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你需要了解的ES6的新特性（前沿技术）]]></title>
    <url>%2F2017%2F07%2F26%2F%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84ES6%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF%EF%BC%89%2F</url>
    <content type="text"><![CDATA[ES6新特性 最近在项目中遇到了很多ES6的语法，遇到了不少坑坑洼洼，因此，在这里就简单介绍一下ES6中的一些新特性 如果想真正的了解ES6和ES5有什么不同，这里推荐看一下阮一峰的一本《ECMAScript 6 入门》 在我下面，主要介绍一下ES6标准下的let, const, “=&gt;”, “…”的介绍和用法 ES6背景介绍ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。 那么，ECMAScript 和 JavaScript 到底是什么关系？ 要讲清楚这个问题，需要回顾历史。1996年11月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给国际标准化组织ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是1.0版 let命令基本用法ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。1234567&#123; let a = 10; var b = 1;&#125;a // ReferenceError: a is not defined.b // 1 上面代码在代码块之中，分别用let和var声明了两个变量。然后在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。看到这里，是不是觉得let和C语言还有其他语言的语言很像了呢，确实，其实原理基本都差不多。 使用注意 不存在变量提升：var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。 1234567// var 的情况console.log(foo); // 输出undefinedvar foo = 2;// let 的情况console.log(bar); // 报错ReferenceErrorlet bar = 2; 暂时性死区：只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。 123456var tmp = 123;if (true) &#123; tmp = &apos;abc&apos;; // ReferenceError let tmp;&#125; 不允许重复声明：let不允许在相同作用域内，重复声明同一个变量。 1234567891011// 报错function () &#123; let a = 10; var a = 1;&#125;// 报错function () &#123; let a = 10; let a = 1;&#125; 快级作用域：这个特性是我觉得最奇怪的，原本javascript是作用域链的形式，为什么无缘无故要突然改变了自己之前的主意呢。不过这个也很容易理解，有过C语言和C++等语言基础的就会很了解快级作用域 1234567function f1() &#123; let n = 5; if (true) &#123; let n = 10; &#125; console.log(n); // 5&#125; 上面的函数有两个代码块，都声明了变量n，运行后输出5。这表示外层代码块不受内层代码块的影响。如果两次都使用var定义变量n，最后输出的值才是10。 const命令基本用法const声明一个只读的常量。一旦声明，常量的值就不能改变。const声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。12345const PI = 3.1415;PI // 3.1415PI = 3;// TypeError: Assignment to constant variable. 使用注意 仅仅保证地址不变const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。1234const a = [];a.push(&apos;Hello&apos;); // 可执行a.length = 0; // 可执行a = [&apos;Dave&apos;]; // 报错 箭头函数”=&gt;”基本用法ES6 允许使用“箭头”（=&gt;）定义函数123456var f = v =&gt; v;//等同于var f = function(v) &#123; return v;&#125;; 使用注意 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。 不可以使用yield命令，因此箭头函数不能用作 Generator 函数。 这里说一下最重要的第一点吧12345678910function foo() &#123; setTimeout(() =&gt; &#123; console.log(&apos;id:&apos;, this.id); &#125;, 100);&#125;var id = 21;foo.call(&#123; id: 42 &#125;);// id: 42 上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到100毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。 数组拓展运算符”…”基本用法扩展运算符（spread）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。12345678console.log(...[1, 2, 3])// 1 2 3console.log(1, ...[2, 3, 4], 5)// 1 2 3 4 5[...document.querySelectorAll(&apos;div&apos;)]// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;] 也可以运用于函数及其他12345678910function push(array, ...items) &#123; array.push(...items);&#125;function add(x, y) &#123; return x + y;&#125;var numbers = [4, 38];add(...numbers) // 42 文中就简单介绍这么多，想更加了解ES6新特性的可以自寻查看一下阮一峰的一本《ECMAScript 6 入门》]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack走在前端技术的前沿（深入浅出）]]></title>
    <url>%2F2017%2F07%2F25%2Fwebpack%E8%B5%B0%E5%9C%A8%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E7%9A%84%E5%89%8D%E6%B2%BF%EF%BC%88%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Webpack网上有很多webpack的介绍，也有不少的视频，但是不少人看到应该还是不是很了解webpack里面到底是讲什么，而且报错了之后也是不知所措 那么这里我作为一个工具小白就阐述一下小白面前应该怎么学习webpack吧，当你看完之后，我相信对其他工具也会有更深的了解 概述在我的文章里主要讲解： webpack基本介绍及安装 webpack基本配置和配置文件 webpack在项目中如何自动生成html文件 强大的loader加载器 还有更多的功能我也会在文中提及到 附：webpack官网地址[英文官网][中文官网] 1.webpack基本介绍及安装1.1 webpac基本介绍 Webpack是时下最流行的模块打包器 它的主要任务就是将各种格式的JavaScript代码，甚至是静态文件进行分析、压缩、合并、打包，最后生成浏览器支持的代码 用一张图片简单表示一下 特点： 代码拆分方案：webpack可以将应用代码拆分成多个块，每个块包含一个或多个模块，块可以按需异步加载，极大提升大规模单页应用的初始加载速度 智能的静态分析：webpack的智能解析器几乎可以处理任何第三方库 Loader加载器：webpack只能处理原生js模块，但是loader可以将各种资源转换为js模块 plugin插件：webpack有功能丰富的插件系统，满足各种开发需求 快速运行：webpack 使用异步 I/O 和多级缓存提高运行效率，使得它能够快速增量编译 综合来说webpack综合了目前网络上的打包工具的优点，但是也要合理使用，不然也会适得其反 1.2 webpack的安装 第一步，首先得安装好node.js和npm npm是前端开发者必备的下载工具吧，如果你连这个也没有安装的话，那么你就得快点安装了，这里附一个gulp打包工具的教程，这里第一和第二步有node.js和npm的安装具体教程，如果你没有安装，那就得快点入门了。 第二步，进入webpack世界 首先，新建一个webpack-test文件夹作为你的项目目录 然后，用npm初始化你的项目，进入cmd，切换到你的目录下，输入：1npm init 然后会出现一大堆输入的东西，这里我们全部选择默认输入enter就好了 输入完了之后，它会提示你输入的信息给你核对，按下确认之后，就会在你的项目目录下生成了package.json 下一步，我们在我们的文件夹里面安装一下webpack吧，在项目目录下的cmd输入1npm install webpack --save-dev 这就安装好了，这里就给大家来一个小Demo，让大家更加了解webpack的打包方式吧，如果已经有基础的同学可以跳过这里 1.3 webpack几个小Demo在webpack-test下新建一个hello.js，输入下面的代码1234//自定义一个函数function hello (str) &#123; alert(str);&#125; 然后在命令行输入1webpack hello.js hello.bundle.js 这里的意思是用webpack文件将hello.js打包成hello.bundle.js输出在根目录下，成功之后在根目录下就会出现hello.bundle.js文件 然后介绍一下我们打包成功的各个东西的含义吧 然后再在根目录下新建一个world.js，在文件里输入1234//随便自定义一个函数function world () &#123;&#125; 再去修改hello.js成为123456require(&apos;./world.js&apos;) //连接到另外一个函数块//自定义一个函数function hello (str) &#123; alert(str);&#125; 再输入一下1webpack hello.js hello.bundle.js 进行打包之后就会发现，打包成功里面hello.js的chunks序列号是0，world.js的chunks序列号是1，然后在hello.bundle.js看到他们的序列号也是这样。 那么如果我想也把css文件也打包进去应该怎么办呢？ 我们再在根目录下新建一个style.css，在里面简单输入1234html, body &#123; padding: 0; margin: 0;&#125; 然后这里我们需要下载两个loaders加载器，为什么要下载loaders加载器呢，你也可以想一想，css文件和js文件毕竟不一样，如果在hello.js引入style.css那么肯定会报错，这个时候，我们需要一种东西帮忙加载我们的css成js 接下来我们下载两个loaders加载器，后面说一下这两个的作用，在命令行输入1npm install css-loader style-loader 然后把hello.js改成1234567require(&apos;./world.js&apos;) //连接到另外一个函数块require(&apos;css-loader!./style.css&apos;) //利用css-loader加载器解析css文件使之可读//自定义一个函数function hello (str) &#123; alert(str);&#125; 再在输入一下指令，打包好了后了可以观察hello.bundle.js里面就多了css文件里面的内容 这时候，你也许会觉得，我说了那么多，那么，怎么把这些东西用到我们的页面中吗？下面就会说到 在我们的跟目录下新建一个index.html，加入下面内容123456789&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;webpack&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;./hello.bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 再把我们的style.css改成12345678html, body &#123; padding: 0; margin: 0;&#125;body &#123; color: red;&#125; 再把我们的hello.js改成12345678910require(&apos;./world.js&apos;) //连接到另外一个函数块require(&apos;style-loader!css-loader!./style.css&apos;)//利用css-loader加载器解析再用style-loader解析css文件使之可读//自定义一个函数function hello (str) &#123; alert(str);&#125;hello(&apos;hello webpack&apos;); 然后我们再打包运行一下,就可以在页面看到我们的结果，这时候如果你细心，就会发现我们在css-loader前面加了个style-loader，如果你不加的话，你就会发现你的页面打开后不是红色的，因为还没经过style-loader的解析，当然这只是一种方法，还有其他方法可以自寻在官网看看文档。 如果你觉得每次修改之后打包也很麻烦，这时候我们的watch就有作用了，你可以在打包后面加入，例如输入1webpack hello.js hello.bundle.js --watch 然后下次修改就不用在进行输入打包代码了，这上面也就是简单的介绍了一下我们的webpack是怎么从一个文件链接到很多文件的。 2.webpack基本配置和配置文件 这里就是我们最重要的一个部分了，如果你看过很多webpack打包后的开源项目之后，你就会发现，有些时候你不知道从哪里看起，那就从配置文件开始看起来吧 相信你应该也在不少的文章中看到有关于配置文件的说法的吧，毕竟配置文件也算是最重要的一部分了，这里也可以推荐你看一篇我觉得还不错的webpack入门 不过我如果你没有基础的话，建议继续看下我的再去看那一篇，收获会更大 首先，我们新建一个项目webpack-demo，按照我上面教程文章里面下载安装好webpack，安装完了之后，我们需要新建几个文件以及文件夹，如下面所示 然后在index.html输入12345678910&lt;!-- index.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;webpack demo&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;./dist/js/bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 在webpack.config.js也就是webpack的配置文件里面输入12345678910// webpack.config.jsmodule.exports = &#123; entry:&apos;./src/script/main.js&apos;, //我们的入口文件，相当于前面一节webpack-test中的hello.js output:&#123; path: __dirname + &quot;/dist/js&quot;, /*打包完了之后，把内容输出到这个文件夹上,也可以写成&quot;./dist/js&quot;， 但是这样放在服务器上路径可能会出错，所以加上__dirname*/ filename: &apos;bundle.js&apos; //输入到上面path文件夹里面的bundle.js，没有则自动新建 &#125;&#125; 再在main.js里面输入123456//main.jsfunction helloworld () &#123; alert(&apos;hello world&apos;);&#125;helloworld(); 在命令行输入webpack,就将我们的入口文件及其链接文件（这里还没有）打包输出在dist/js目录下面的bundle.js文件了。 这就是我们的配置文件的最简单的用法，以后我们还可以在里面配置很多loaders，甚至更复杂的打包，下面一步步说明吧。 我们也可以不用在命令行里面输入webpack，因为我们可能以后会查询更多东西，因此我们可以，在package.json的script里面加入：1&quot;webpack&quot;:&quot;webpack --config webpack.config.js --progress --color&quot; 这里的–progress和–color只是为了输出进度条和color，没有实际意义，然后在命令行输入npm run webpack就可以默认使用webpack进行打包了。 还有更多关于我们入口文件和输出文件的介绍，我建议看一下慕课网的这个视频会更加了解webpack配置文件 3.webpack在项目中如何自动生成html文件 在说这个之前，我们为什么要自动生成html页面？我们直接用index.html不就可以了？但是实际项目往往是有多个页面的，不过这里我们就简单介绍一个页面怎么自动生成，多个也是同样的原理，我们先来安装一个插件html-webpack-plugin，我们在命令行输入：1npm install html-webpack-plugin --save-dev 然后把我们的webpack.config.js里面修改成1234567891011121314151617// webpack.config.jsvar htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)//引入我们的插件module.exports = &#123; entry: &#123; main: &apos;./src/script/main.js&apos;, &#125;, //我们的入口文件，相当于前面一节webpack-test中的hello.js output:&#123; path: __dirname + &quot;/dist/js&quot;, /*打包完了之后，把内容输出到这个文件夹上,也可以写成&quot;./dist/js&quot;， 但是这样放在服务器上路径可能会出错，所以加上__dirname*/ filename: &apos;[name]-[hash].js&apos; //输入到上面path文件夹里面的bundle.js，没有则自动新建 &#125;, plugins:[ new htmlWebpackPlugin() //对插件进行实例化 ]&#125; 然后，在我们的dist下面就有了一个项目自动生成的inex.html文件了 但是如果你细心就可以发现这个时候的index.html和我们原来的index.html没有任何的联系，这时候我们需要修改我们配置文件中的插件实例化那里修改成12345plugins:[ new htmlWebpackPlugin(&#123; template: &apos;index.html&apos; &#125;) //对插件进行实例化] 再打包一次之后，就会发现生成的dist目录下面的index.html文件就会绑定了其他js文件。更具体的就请查看一下官方文档了，毕竟篇幅不能太长。 4.强大的loader加载器 前面我们也有所提到我们的loader加载器，但是实际中是怎么样的呢，这里我围绕我们项目经常利用babel-loader转换ES6 Loaders需要单独安装并且需要在webpack.config.js下的modules关键字下进行配置，Loaders的配置选项包括以下几方面： test：一个匹配loaders所处理的文件的拓展名的正则表达式（必须） loader：loader的名称（必须） include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）； query：为loaders提供额外的设置选项（可选） 首先，新建一个工程webpack-loader吧，然后将项目用npm初始化后，再在项目下下载webpack，然后构建好下面的这些目录 用npm下载一下html-webpack-plugin插件1npm install html-webpack-plugin --save-dev 修改我们的index.html成123456789&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; layer.html123&lt;div class=&quot;layer&quot;&gt; &lt;div&gt;this is a layer&lt;/div&gt;&lt;/div&gt; layer.js12345678910// import tpl from &apos;./layer.html&apos;function layer () &#123; return &#123; name: &apos;layer&apos;, tpl: tpl &#125;&#125;export default layer; app.js12345678910//app.jsimport layer from &apos;./component/layer/layer.js&apos;;//导入layer//使用ES6语法const App = function () &#123; console.log(layer);&#125;new App() 利用babel-loader转换ES6Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的： 下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持； 使用基于JavaScript进行了拓展的语言，比如React的JSX 首先，我们先安装Babel在命令行输入1npm install --save-dev babel-loader babel-core 再安装一下babel中的latest这里我们需要用到1npm install --save-dev babel-preset-latest 修改我们的配置文件webpack.config.js1234567891011121314151617181920212223242526272829var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);module.exports = &#123; entry: &#123; main: &apos;./src/app.js&apos;, &#125;, //我们的入口文件，相当于前面一节webpack-test中的hello.js output:&#123; path: __dirname + &quot;/dist/js&quot;, /*打包完了之后，把内容输出到这个文件夹上,也可以写成&quot;./dist/js&quot;， 但是这样放在服务器上路径可能会出错，所以加上__dirname*/ filename: &apos;bundle.js&apos; //输入到上面path文件夹里面的bundle.js，没有则自动新建 &#125;, module: &#123; loaders: [ &#123; test: /\.js$/, //匹配所有的js文件 loader: &apos;babel-loader&apos;, //引用lbabel插件 &#125; ] &#125;, plugins: [ new htmlWebpackPlugin(&#123; filename:&apos;index.html&apos;, template:&apos;index.html&apos;, inject:&apos;body&apos; //将script标签加载进body &#125;) ]&#125; 再在我们的package.json下加入1234567&#123; //... &quot;babel&quot;: &#123; &quot;presets&quot;: [&quot;latest&quot;] &#125;, //...&#125; 在命令行输入webpack，就可以在我们的dist目录下面的js里面看到我们的配置文件已经有了这些文件 其他加载器css,less,sass等的原理也是一样，这里就不一一介绍了 有兴趣的话，可以继续看看慕课网的视频，在下也是受人启发。 还有更多的加载器可以在我们的webpack官网进行查询，这里我就不进行多解释了]]></content>
      <categories>
        <category>打包构建工具</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小白gulp开发——gulp安装，介绍及less自动编译成css篇]]></title>
    <url>%2F2017%2F03%2F15%2F%E5%B0%8F%E7%99%BDgulp%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94gulp%E5%AE%89%E8%A3%85%EF%BC%8C%E4%BB%8B%E7%BB%8D%E5%8F%8Aless%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%E6%88%90css%E7%AF%87%2F</url>
    <content type="text"><![CDATA[小白gulp开发，哈哈，为什么说是小白呢，因为作者我本人也只会html,css,js其他任何框架，工具几乎后没怎么用过。但是现在前端趋向工程化了，再也不想以前一样一个文件夹文件夹的，而是逐渐有了打包，编译等等出现。因此也学习一下gulp开发。 说了那么多，那么，到底什么是gulp，以及怎么安装gulp呢？ 附：gulp介绍 安装gulp的过程，是不是感觉有些奇怪，node.js是什么，npm又是什么？ 本人简单的理解：ndoe.js就是JavaScript工具包，里面封装了很多与网络，I/O等相关方法，并提供了API借口查询。而npm就是一个运行在node.js上的一个软件下载管理，帮忙用来下载软件的。类似的，cnpm就是下载的时候不用翻墙。 安装配置好了gulp之后，那就说说怎么来进行把less编译成css文件 附：小demo教程。这个教程有基本怎么配置及运行，若读者想多点尝试，也可以把目录树进行修改，按照注释就可以创建自己的目录结构。]]></content>
      <categories>
        <category>打包构建工具</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[百度前端任务(3)(4)(5)——巧谈前端基础html,css布局]]></title>
    <url>%2F2017%2F01%2F13%2F%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E4%BB%BB%E5%8A%A1-3-4-5-%E2%80%94%E2%80%94%E5%B7%A7%E8%B0%88%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80html-css%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[经过了百度前端技术学院任务三和四五，在这里总结一下前端布局的一些个人见解，很多前端新手就是没有理解怎么布局而一直学不好 123456先说一下，我个人理解的前端布局的思想吧。在前端布局的时候，先不要设计太多什么margin,padding什么的首先，你要清楚的是，你要的布局是什么例如，我这里拿百度前端技术学院的任务(5)作为例子讲解一下吧 附：百度前端技术学院的任务(5) 首先，根据题意，我们很容易得知，这是由一个头尾和内容的布局，布局采用的是类似淘宝双飞翼布局做成的CSS实现右侧固定宽度，左侧宽度自适应（点击链接即可知道具体怎么实现） 不过这不是这一篇的重点，重点是上中下布局。怎么实现呢？这里附上html和css代码 123456&lt;!--首部--&gt;&lt;div id=&quot;top&quot;&gt;&lt;/div&gt;&lt;!--内容--&gt;&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;&lt;!--尾部--&gt;&lt;div id=&quot;footer&quot;&gt;&lt;/div&gt; 1234567891011121314#top&#123; height: 50px; background: black;&#125;#content&#123; height: 550px; background: gray;&#125;#footer&#123; height: 50px; background: blueviolet;&#125; 形成了上中下结构之后，再进行其他地方的编辑，注意，其他地方，一般要用class不要滥用id(虽然两者用起来都差不多)。接下来我，来示范一下CSS实现右侧固定宽度，左侧宽度自适应的做法吧。 附代码1234&lt;div id=&quot;content&quot;&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt; 12345678910111213141516171819202122#content&#123; height: 550px; width: 100%; background: gray;&#125;.left&#123; height: 500px; width: 100%; margin-left: -200px; float: left; background: yellow;&#125;.right&#123; position: absolute; top: 0; right: 0; height: 200px; width: 200px; background: red;&#125; 这样就用绝对布局实现了一个比较简单的右侧固定宽度，左侧宽度自适应的做法。 然后再在各个板块上加上各自的margin,padding属性就比较很好看了。 但是，可能有很多新手还不是很清楚margin,padding和width属性到底具体指什么，这里我用一张图说明一下吧。 具体如果还不知道怎么做，可以留言，我会细心帮你解答。]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器默认样式及css初始化]]></title>
    <url>%2F2017%2F01%2F12%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F%E5%8F%8Acss%E5%88%9D%E5%A7%8B%E5%8C%96%2F</url>
    <content type="text"><![CDATA[为什么要初始化css? 建站老手都知道，这是为了考虑到浏览器的兼容问题，其实不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面差异。当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。 相信很多人都曾经出现过多多少少的，有时候进行网页布局的时候，不知道为什么设置的网页边距总是达不到自己想要的效果。 比如，我在这个属性设置了60px，但是，它却变成了92px. 查看了一下所有属性，原来是浏览器默认加上去的。 再看看，为什么我，没加float之前是正常的。 加了float后变成不正常了,在这里，我也没有加margin属性。 原来，是加了float使其脱离了文档流 然后，浏览器默认加上了margin-top: 16px和margin-bottom: 16px;然后60+16+16=92; 当然，还有很多类似的问题，这里附上一些网站的默认css属性 http://www.iecss.com/ 那么，应该怎么样解决这个问题呢？ 可以在css加上1234*&#123; margin: 0; padding: 0;&#125; 有很多人也是这样写的。这确实很简单，但有人就会感到疑问：*号这样一个通用符在编写代码的时候是快，但如果网站很大，CSS样式表文件很大，这样写的话，他会把所有的标签都初始化一遍，这样就大大的加强了网站运行的负载，会使网站加载的时候需要很长一段时间。 还有就是把可能用上的属性值加上，这里引用了雅虎工程师提供的CSS初始化示例代码 123456789101112131415body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,button,textarea,p,blockquote,th,td &#123; margin:0; padding:0; &#125;body &#123; background:#fff; color:#555; font-size:14px; font-family: Verdana, Arial, Helvetica, sans-serif; &#125;td,th,caption &#123; font-size:14px; &#125;h1, h2, h3, h4, h5, h6 &#123; font-weight:normal; font-size:100%; &#125;address, caption, cite, code, dfn, em, strong, th, var &#123; font-style:normal; font-weight:normal;&#125;a &#123; color:#555; text-decoration:none; &#125;a:hover &#123; text-decoration:underline; &#125;img &#123; border:none; &#125;ol,ul,li &#123; list-style:none; &#125;input, textarea, select, button &#123; font:14px Verdana,Helvetica,Arial,sans-serif; &#125;table &#123; border-collapse:collapse; &#125;html &#123;overflow-y: scroll;&#125;.clearfix:after &#123;content: &quot;.&quot;; display: block; height:0; clear:both; visibility: hidden;&#125;.clearfix &#123; *zoom:1; &#125; 然后，每次写css之前都加上这个就不用担心什么问题了。]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端开发工具篇(3)——tortoiseGit的使用提交代码篇]]></title>
    <url>%2F2017%2F01%2F11%2F%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87-3-%E2%80%94%E2%80%94tortoiseGit%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E7%AF%87%2F</url>
    <content type="text"><![CDATA[在前面的文章中，我们讲解过git和tortoise的安装，但是，在许多新手面前，git的使用还是一脸懵逼，那么就说一下怎么简单的使用tortoiseGit吧 由于使用git的方法很多，这里就讲一种我觉比较简单的一种吧，首先要配置好github的ssh，如果不知道怎么配置，可以参考前端开发工具篇(1)——安装git和乌龟tortoiseGit 接下来，说正题了 1.先右键一下桌面(或者其他文件夹),然后选择Git Createrre… 在弹出的对话框勾选make it bare 2.在工作目录下,先确认身份TortoiseGit–&gt;Setting,在打开的对话框里,左边选git,右边就会出现写用户名和邮箱的地方 ==注意核对用户名和邮箱== 在用户工作目录下点击右键,选择git clone,弹出对话框 点击ok后,发现此文件夹下多了一个隐藏的文件夹.git,则clone成功 3.ethan用户在.git同级目录下添加一个文件index.jsp,里面写内容”hello git!”然后右键Tortoisegit–&gt;add,完成后index.jsp变成+号然后右键Git Commit -&gt; “master”… 在弹出的对话框,输入message信息后点ok,此时index.jsp变成对勾,提交到了本地服务器然后右键Tortoisegit–&gt;push则提交到了远程服务器]]></content>
      <categories>
        <category>前端开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>安装git和乌龟tortoiseGit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端开发工具篇(2)——安装git和乌龟tortoiseGit]]></title>
    <url>%2F2017%2F01%2F10%2F%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87(2)%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85git%E5%92%8C%E4%B9%8C%E9%BE%9FtortoiseGit%2F</url>
    <content type="text"><![CDATA[作为一个前端开发人员，开发工具先是非常重要的，俗话说”欲力其工必先利其器” git是每个程序员必须要学会的技能，但是git命令输入比较还是比较繁琐，有桌面端肯定更好。 附：安装git和乌龟git教程 在安装tortoiseGit的时候可能会出现,2503,2502错误。 按照网上的说法是要进入cmd管理员身份,然后输入mriexec \package”路径”(例如mrexec \package”F:\text.msi”) 但是我在输入的时候发现提示另外的错误： “无法打开该修补程序包，请与应用供应商联系”… 这时候，发现了，mriexec应该是安装exe文件的，然后我在cmd(以管理员身份)直接打开msi文件就可以直接安装了(例如:F:\test.msi)。]]></content>
      <categories>
        <category>前端开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>tortoiseGit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端开发工具篇(1)——汇总篇]]></title>
    <url>%2F2017%2F01%2F10%2F%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87(1)%E2%80%94%E2%80%94%E6%B1%87%E6%80%BB%E7%AF%87%2F</url>
    <content type="text"><![CDATA[作为一个前端开发人员，开发工具先是非常重要的，俗话说”欲力其工必先利其器 在这里主要介绍几个软件给大家: git(mygit)和tortoiseGit，强大的git工具。 vs code，前端开发的主要工具另外也有其他的(例如sublime等,这里就不一一介绍了)。 Node.js,这是一个Javascript运行环境(runtime),用于方便地搭建响应速度快、易于扩展的网络应用。 有道云笔记，一个用来记录的文件，写博客会用到 具体安装和下载见其他文章]]></content>
      <categories>
        <category>前端开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>vscode</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
</search>
